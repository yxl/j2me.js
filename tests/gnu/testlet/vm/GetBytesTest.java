package gnu.testlet.vm;

import gnu.testlet.*;

public class GetBytesTest implements Testlet {
    public int getExpectedPass() { return 897; }
    public int getExpectedFail() { return 0; }
    public int getExpectedKnownFail() { return 0; }
    private static byte[] hexToBytes(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                                  + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }

    private static final byte[] shouldBe = hexToBytes("1019334b4d314c337d0c49314a542a7d150f0a38523d4d3b4b4d2c5a783c4931580f107d0b7d0028523d7d112d483c5a6b10257d015a355038492852337d0c3a5c3b0f2a5235503849317b7d0c3a5c2d55310f79317d133c4d30542d553a49344b480d744d304b715a39344b7852335b0f0b3d483c5a783c537d0028523d4d4910005c2a7d192d483c494c337d1b7d00320f4c49314a542a7d153b4b4d314c33500e753a49344b78497d133c4d304b350e3a39344b7852335b3c4d304b714a0e392852337d0c3a5c3b715a3550380f343c3a5c2d553a493d503849317d131005534d314c337d1b39314a542a7d19330f1c3a3d4d3b4b4d3152783c49314a380e0c537d0028523d4d492d483c5a780f35315a35503849314a337d0c3a5c2d0f313d503849317d13743a5c2d553a521020497d133c4d304b35553a49344b7d110e2c55304b715a353c4b7852337d140f13383c5a783c497d0828523d4d3b3d1012327d192d483c5a3c337d1b7d00285c101b39314a542a7d19334b4d314c337d0c0f214a49344b78527d0b3c4d304b7d050e2d3c4b7852337d144d304b715a3910294a337d0c3a5c2d7d015a3550384928103d2a5c2d553a4934583849317d133c3c0f0855314c337d1b694a542a7d192d5310024d4d3b4b4d314c7d003c49314a543a0f117d0828523d4d3b3d483c5a783c53101a3c337d1b7d00285c2a7d192d483c491024583849317d133c3c3a5c2d553a493d0f327d0b3c4d304b7d053a49344b78490e22484b715a3550337852337d0c550f1d2c5a783c49315828523d4d3b4b380f0d7d112d483c5a6b7d1b7d002852320f414a542a7d192d534d314c337d1b3910147d003c49314a543a3d4d3b4b4d31520e38337852337d0c55304b715a353c0f637d0c3a5c2d55315a35503849314a1028542d553a49344b4849317d133c4d2a1004494c337d1b7d0032542a7d192d48550f553b4b4d314c33503c49314a542a4d0e015828523d4d3b4b383c5a783c490f437d1b7d002852327d192d483c5a3c102b4849317d133c4d2a5c2d553a4934580d235b3c4d304b714a49344b78520e3c3b715a3550387052337d0c3a480f0952783c49314a38523d4d3b4b4d2c0e15492d483c5a787d0b7d0028523d0f1832542a7d192d4855314c337d1b690f03503c49314a542a4d4d3b4b4d314c0e307052337d0c3a484b715a3550330e3b743a5c2d553a5235503849317b103335553a49344b7d11317d133c4d3054");

    private static final byte[] data = ("\020\0313KM1L3}\014I1JT*}\025" +
            "\017\0128R=M;KM,Zx<I1X\017\020}\013}\000(R=}\021-H<Zk\020" +
            "%}\001Z5P8I(R3}\014:\134;\017*R5P8I1{}\014:\134-U1\017y1}" +
            "\023<M0T-U:I4KH\015tM0KqZ94KxR3[\017\013=H<Zx<S}\000(R=MI" +
            "\020\000\134*}\031-H<IL3}\033}\0002\017LI1JT*}\025;KM1L3P" +
            "\016u:I4KxI}\023<M0K5\016:94KxR3[<M0KqJ\0169(R3}\014:\134" +
            ";qZ5P8\0174<:\134-U:I=P8I1}\023\020\005SM1L3}\03391JT*}" +
            "\0313\017\034:=M;KM1Rx<I1J8\016\014S}\000(R=MI-H<Zx\01751Z" +
            "5P8I1J3}\014:\134-\0171=P8I1}\023t:\134-U:R\020\040I}\023<" +
            "M0K5U:I4K}\021\016,U0KqZ5<KxR3}\024\017\0238<Zx<I}\010(R=M" +
            ";=\020\0222}\031-H<Z<3}\033}\000(\134\020\03391JT*}\0313KM" +
            "1L3}\014\017!JI4KxR}\013<M0K}\005\016-<KxR3}\024M0KqZ9\020" +
            ")J3}\014:\134-}\001Z5P8I(\020=*\134-U:I4X8I1}\023<<\017" +
            "\010U1L3}\033iJT*}\031-S\020\002MM;KM1L}\000<I1JT:\017\021" +
            "}\010(R=M;=H<Zx<S\020\032<3}\033}\000(\134*}\031-H<I\020$X" +
            "8I1}\023<<:\134-U:I=\0172}\013<M0K}\005:I4KxI\016\042HKqZ5" +
            "P3xR3}\014U\017\035,Zx<I1X(R=M;K8\017\015}\021-H<Zk}\033}" +
            "\000(R2\017AJT*}\031-SM1L3}\0339\020\024}\000<I1JT:=M;KM1" +
            "R\01683xR3}\014U0KqZ5<\017c}\014:\134-U1Z5P8I1J\020(T-U:I" +
            "4KHI1}\023<M*\020\004IL3}\033}\0002T*}\031-HU\017U;KM1L3P" +
            "<I1JT*M\016\001X(R=M;K8<Zx<I\017C}\033}\000(R2}\031-H<Z<" +
            "\020+HI1}\023<M*\134-U:I4X\015#[<M0KqJI4KxR\016<;qZ5P8pR3" +
            "}\014:H\017\011Rx<I1J8R=M;KM,\016\025I-H<Zx}\013}\000(R=" +
            "\017\0302T*}\031-HU1L3}\033i\017\003P<I1JT*MM;KM1L\0160pR" +
            "3}\014:HKqZ5P3\016;t:\134-U:R5P8I1{\02035U:I4K}\0211}\023" +
            "<M0T").getBytes();

    public void test(TestHarness th) {
        th.check(shouldBe.length, data.length);

        for (int i = 0; i < data.length; i++) {
            th.check(shouldBe[i], data[i]);
        }
    }
}
